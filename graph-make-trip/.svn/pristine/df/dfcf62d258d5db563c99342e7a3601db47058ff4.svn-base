package graph;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

/** An adjacency matrix implementation.
 *  Used by directed and undirected
 * @author Andrew Berger
 */
abstract class AdjMat<VLabel, ELabel> extends Graph<VLabel, ELabel> {
    
    
    @Override 
    public int vertexSize() {
        return _vertices.size();
    }

    @Override
    public int edgeSize() {
        return _edgeMap.size();
    }

    @Override
    public boolean isDirected() {
        return !_undirected;
    }

    @Override
    public int outDegree(Vertex v) {
        int ind = _vertMap.get(v);
        int outDeg = 0;
        //i am assuming down is outgoing
        for (int i = 0; i < _edges.size(); i++) {
            if (_edges.get(ind).get(i) != null) {
                outDeg += 1;
            }
        }
        return outDeg;
    }
    
    @Override
    public int inDegree(Vertex v) {
        int ind = _vertMap.get(v);
        int inDeg = 0;
        //across is ingoing
        for (int i = 0; i < _edges.size(); i++) {
            if (_edges.get(i).get(ind) != null) {
                inDeg += 1;
            }
        }
        return inDeg;
    }

    @Override
    public boolean contains(Vertex u, Vertex v) {
        int from = _vertMap.get(u);
        int to = _vertMap.get(v);
        if (_edges.get(from).get(to) != null) {
            return true;
        }
        return false;
    }

    public boolean contains(Vertex u, Vertex v, ELabel label) {
        int from = _vertMap.get(u);
        int to = _vertMap.get(v);
        if (contains(u, v)) {
            if (_edges.get(from).get(to).getLabel() == label) {
                return true;
            }
        }
        return false;
    }

    @Override
    public Vertex add(VLabel label) {
        Vertex v = new Vertex(label, _idIncr);
        _idIncr += 1;
        increaseSize(1);
        _vertices.add(v);
        _vertMap.put(v, size() - 1);
        return v;
    }

    @Override 
    public Edge add(Vertex from, Vertex to, ELabel label) {
        int fromInd = _vertMap.get(from);
        int toInd = _vertMap.get(to);
        Edge e = new Edge(from, to, label, _idIncr);
        _idIncr += 1;
        addEdge(fromInd, toInd, e);
        return e;
    } 
    

    /** Internal method for making edge E between vertices FROM and TO .
     *  Need fast mapping from vertices to indices */
    private void addEdge(int from, int to, Edge e) {
        _edges.get(from).set(to, e);
        _edgeMap.put(e, new int[] {from, to});
        if (_undirected) {
            _edges.get(to).set(from, e);
        }
    }

    @Override
    public void remove(Edge e) {
        int[] coord = _edgeMap.get(e);
        int from = coord[0];
        int to = coord[1];
        _edges.get(from).set(to, null);
        _edgeMap.remove(e);
        if (_undirected) {
            _edges.get(to).set(from, null);
        }
    }

    @Override 
    public void remove(Vertex v) {
        removeFromEdgeMat(v);
        removeFromVertexList(v);
    }

    public void remove(Vertex v1, Vertex v2) {
        PathFinder<VLabel, ELabel> = new PathFinder<VLabel, ELabel>(v2);
        PathFinder.depthFirstTraverse(this, v1);
    }
    
    /** Adds NUM new spots to _ADJ, initally all zero.
     *  Ensures _ADJ is square 
     *  Does the same to _EDGES
     *  IMPORTANT: Does not modify _VERTICES*/
    private void increaseSize(int num) {
        for (int k = 0; k < num; k += 1) {
            _edges.add(new ArrayList<Edge>());
        }
    }

    /** Returns the current size.*/
    private int size() {
        assert _vertices.size() == _edges.size();
        return _edges.size();
    }        
    
    /** Subroutine of remove V.
     * Removes V from _VERTICES at pos IND, then shifts the
     * positions of the i+1..n] vertices in the hastable my -1.*/
    private void removeFromVertexList(Vertex v) {
        int ind = _vertices.indexOf(v);
        for (int i = ind + 1; i < _vertices.size(); i++) {
            _vertMap.put(_vertices.get(i), i - 1);
        } 
        _vertices.remove(v);
    }

    /** Subroutine of remove V.
     * CALL THIS BEFORE REMOVEFROMVERTEXLIST
     * Takes out a collumn and row in V.*/
    private void removeFromEdgeMat(Vertex v) {
        int ind = _vertices.indexOf(v);
        for (int i = 0; i < _edges.size(); i++) {
            if (_edges.get(i).get(ind) != null) {
                remove(_edges.get(i).get(ind));
            }
            if (_edges.get(ind).get(i) != null) {
                remove(_edges.get(ind).get(i));
            }
        }
        _edges.remove(ind);
        for (int j = 0; j < _edges.size(); j++) {
            _edges.get(j).remove(ind);
        }
    }

    /** Used by remove to find all edges between two vertices. */
    private class PathFinder<VLabel, ELabel> extends Traversal<VLabel, ELabel> {
       
        /** A new path finder. */
        PathFinder(Graph<VLabel, ELabel>.Vertex destNode) {
            _dest = destNode;
            _removal = new ArrayDeque<Graph<VLabel, ELabel>.Edge>();
        }

        @Override 
        protected void preVisit(Graph<VLabel, Elabel>.Edge e, Graph<VLabel, ELabel>.Vertex v0) {
            _removal.push(e);
            if (v0 == _dest) {
                throw new StopException();
            }
        }

        @Override 
        protected void postVisit(Graph<VLabel, Elabel>.Edge e, Graph<VLabel, ELabel>.Vertex v0) {
            Graph<VLabel, ElabeL>.edge unused = _removal.pop(e);
        }

        public ArrayDeque<Graph<VLabel, ELabel>.Edge> getRemovals() {
            return _removal;
        }

        /** The node we are looking for.*/
        private Graph<VLabel, ELabel>.Vertex _dest;
        /** Once a stop exception is thrown, all edges in this queue will be removed. */
        private ArrayDeque<Graph<VLabel, ELabel>.Edge> _removal;
    }
    

    /** Holds vertice labels. Is of dimension SIZE.*/
    private List<Vertex> _vertices = new ArrayList<Vertex>();
    /** Fast mapping from vertice to its indice. */
    private HashMap<Vertex, Integer> _vertMap = new HashMap<Vertex, Integer>();
    /** Holds edge labels. Each list of dimension SIZE. */
    private List<List<Edge>> _edges = new ArrayList<List<Edge>>();
    /** Fast mapping from edge to coord */
    private HashMap<Edge, int[]> _edgeMap = new HashMap<Edge, int[]>();
    /** True iff I am implementing an undirected graph.*/
    private boolean _undirected;
    /** Increment every time a new vertex or edge is created to guarantee a unique id.*/
    private int _idIncr = 0;
}


