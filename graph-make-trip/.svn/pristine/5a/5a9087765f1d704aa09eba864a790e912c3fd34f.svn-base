package graph;

import org.junit.Test;
import ucb.junit.textui;
import static org.junit.Assert.*;

public class UndirectedGraphTesting {


    @Test
    public void checkAdd() {
        UndirectedGraph<Integer, Integer> u = new UndirectedGraph<Integer, Integer>();
        Vertex<Integer> v = u.add(10);
        Vertex<Integer> w = u.add(15);
        Edge<Integer, Integer> z  = u.add(v, w, 5);
        assertEquals("V value is wrong", 10, v.getLabel());
        assertEquals("w value is wrong", 15, w.getLabel());
        assertEquals("Edge exists", true, u.contains(v, w, 5));
    }

    @Test
    public void CheckDegree() {
        UndirectedGraph<Integer, Integer> u = new UndirectedGraph<Integer, Integer>();
        Vertex<Integer> v = u.add(10);
        Vertex<Integer> w = u.add(15);   
        Vertex<Integer> x = u.add(20);
        Vertex<Integer> y = u.add(25);
        Edge<Integer, Integer> vx = u.add(v, x, 5); 
        Edge<Integer, Integer> vw = u.add(v, w, 5);
        Edge<Integer, Integer> vy = u.add(v, y, 5);
        Edge<Integer, Integer> xy = u.add(x, y, 5);
        assertEquals("Wrong degree", 3, u.degree(v));
        assertEquals("Wrong degree", 1, u.degree(w));
        assertEquals("Wrong degree", 2, u.degree(y));
        assertEquals("Wrong degree", 2, u.degree(x));
    }

    @Test
    public void checkEdgeRemoval() {
        UndirectedGraph<Integer, Integer> u = new UndirectedGraph<Integer, Integer>();
        Vertex<Integer> v = u.add(10);
        Vertex<Integer> w = u.add(15);   
        Vertex<Integer> x = u.add(20);
        Edge<Integer, Integer> vw = u.add(v, w, 5);
        Edge<Integer, Integer> vx = u.add(v, x, 5); 
        assertEquals("Edge exists", true, u.contains(v, w, 5));
        u.remove(vw);
        assertEquals("Edge has been removed", false, u.contains(v, w, 5));
        assertEquals("Edge exists", true, u.contains(v, x, 5));
        u.remove(vx);
        assertEquals("Edge has been removed", false, u.contains(v, x, 5));   
    }

    @Test
    public void checkVertexRemoval() {
        UndirectedGraph<Integer, Integer> u = new UndirectedGraph<Integer, Integer>();
        Vertex<Integer> v = u.add(10);
        Vertex<Integer> w = u.add(15);   
        Vertex<Integer> x = u.add(20);
        Edge<Integer, Integer> vw = u.add(v, w, 5);
        Edge<Integer, Integer> vx = u.add(v, x, 5); 
        assertEquals("Edge exists", true, u.contains(v, w, 5));
        assertEquals("Edge exists", true, u.contains(v, x, 5));
        assertEquals("2 Edges", 2, u.degree(v));
        assertEquals("2 edges exist", 2, u.edgeSize());
        assertEquals("3 vertices exist", 3, u.vertexSize());
        u.remove(v);
        assertEquals("Now unconnected", 0, w.degree());
        assertEquals("Now unconnected", 0, x.degree());
        assertEquals("No edges exist", 0 , i.edgeSize());
        assertEquals("2 vertices exist", 2 , u.vertexSize());
    }


    


}