package jump61;

import java.util.ArrayList;

/** An automated Player.
 *  @author Andrew Berger 
 */
class AI extends Player {

    /** A new player of GAME initially playing COLOR that chooses
     *  moves automatically.
     */
    AI(Game game, Color color) {
        super(game, color);
        // FIXME
    }

    @Override
    void makeMove() {
        Game game = getGame();
        Board board = getBoard();
        int[] moves = generateMoves(board);        
        int[] scores = new int[moves.length];
        for (int i = 0; i < moves.length; i++) {
            board = board.addSpot(_color, move);
            scores[i] = 
        }

    }

    //implement faster search algorithm

    /** Return the minimum of CUTOFF and the minmax value of board B
     *  (which must be mutable) for player P to a search depth of D
     *  (where D == 0 denotes evaluating just the next move).
     *  If MOVES is not null and CUTOFF is not exceeded, set MOVES to
     *  a list of all highest-scoring moves for P; clear it if
     *  non-null and CUTOFF is exceeded. the contents of B are
     *  invariant over this call. */
    private int minmax(Color p, Board b, int d, int cutoff,
                       ArrayList<Integer> moves) {
        if (d == 0 || b.getWinner() != null) {
            return staticEval(p, b);
        } else if (b.whoseMove() == p) {
            int best = LOW_SCORE;
        }
            
    }

    /** Alpha-beta search with ALPHA and BETA to DEPTH.
     *  Starts with color P and board B
     *  Some move ordering will help
     *  Returns the score found so far */
    private int negamax(int alpha, int beta, int depth, Color p, Board b) {
        if (depth == 0 || b.getWinner() != null) {
            return quiesce(alpha, beta, p, b);
        } 
        int max = LOW_SCORE;
        int[] moves = generateMoves(b);
        for (int move : moves) {
            b = b.addSpot(p, move);
            int prosp = -negaMax(-beta, -alpha, depth - 1, p.opposite(), b);
            b = b.undo()
            int max = Math.max(max, prosp);
            alpha = Math.max(alpha, prosp);
            if (alpha >= beta) {
                break;
            }
        }
        return max;
    }

    /** Returns a list of integers.
     * The squares where we can add a dot 
     * Initially unordered. */
    private int[] generateMoves(Board b) {
        //assumes color P always == b.whoseMove
        ArrayList<Integer> moves = new ArrayList<Integer>();
        Color p = b.whoseMove();
        for (int n = 0; n < size() * size(); n++) {
            if (b.isLegal(p, n)) {
                moves.append(n);
            }
        }
        return moves.toArray();
    }

    private int[] generateJumps(Board b) {
        ArrayList<Integer> jumps = new ArrayList<Integer>();
        Color p = b.whoseMove();
        for (int n = 0; n < size() * size(); n++) {
            if (b.isLegal(p, n) & spots(n) == neighbors(n)) {
                jumps.append(n);
            }
        }
        return jumps.toArray();
    }
    
    /** Returns heuristic value of board B for player P.
     *  Higher is better for P. */
    private int staticEval(Color p, Board b) {
        if (b.getWinner() != null) {
            if (b.getWinner() == p) {
                return HIGH_SCORE;
            } else {
                return LOW_SCORE;
            }
        } else {
            return b.numOfColor(p);
        }
    }

    private int quiesce(int alpha, int beta, Color p, Board b) {
        int myEval = staticEval(p, b);
        if (myEval >= beta) {
            return beta;
        } else if (myEval > alpha) {
            alpha = myEval;
        }
        int[] jump_moves = generateJumps(b);
        for (int move : jump_moves) {
            b = b.addSpot(move);
            int score = -quiesce(-beta, -alpha, p.opposite(), b);
            b = b.undo();
            if (score >= beta) {
                return beta;
            } else if (score > alpha) {
                alpha = score;
            }
        }
        return alpha;
    }

    /** For min max purposes. Be careful of mod arith. */
    private int HIGH_SCORE = 1000000000;
    /** For min max purposes. Be careful of mod arith. */
    private int LOW_SCORE = -1000000000;

}


